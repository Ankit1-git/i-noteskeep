{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ankit sharma\\\\OneDrive\\\\Desktop\\\\Nodejsprojects\\\\i-noteskeep\\\\src\\\\context\\\\notes\\\\NoteState.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport noteContext from \"./noteContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NoteState = props => {\n  _s();\n  const host = \"http://localhost:5000\";\n  const notesInitial = [];\n  const [notes, setNotes] = useState(notesInitial);\n\n  //GET ALL NOTES\n  const getNotes = async () => {\n    //API CALL\n    const response = await fetch(`${host}/api/notes/fetchallnotes`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\": localStorage.getItem('token')\n      }\n    });\n    const json = await response.json();\n    // console.log(json);\n    setNotes(json);\n  };\n\n  //ADD A NOTE\n  const addNote = async (title, description, tag) => {\n    //API CALL\n    const response = await fetch(`${host}/api/notes/addnote`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\": localStorage.getItem('token')\n      },\n      body: JSON.stringify({\n        title,\n        description,\n        tag\n      })\n    });\n\n    // LOGIC \n    // console.log(\"adding a new note\");\n    const note = await response.json();\n    setNotes(notes.concat(note));\n  };\n\n  //EDIT A NOTE\n\n  const editNote = async (id, title, description, tag) => {\n    //API CALL\n\n    const response = await fetch(`${host}/api/notes/updatenote/${id}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\": localStorage.getItem('token')\n      },\n      body: JSON.stringify({\n        title,\n        description,\n        tag\n      })\n    });\n    const json = response.json();\n    console.log(json);\n\n    //logic to edit in client\n    let newNotes = JSON.parse(JSON.stringify(notes));\n    for (let index = 0; index < notes.length; index++) {\n      const element = notes[index];\n      if (element._id === id) {\n        newNotes[index].title = title;\n        newNotes[index].description = description;\n        newNotes[index].tag = tag;\n        break;\n      }\n    }\n    getNotes(newNotes);\n  };\n\n  //DELETE A NOTE\n\n  const deleteNote = async id => {\n    //API CALL\n\n    const response = await fetch(`${host}/api/notes/deletenote/${id}`, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\": localStorage.getItem('token')\n      }\n    });\n    const json = response.json();\n    console.log(json);\n    // console.log(\"deleting the note with id\" + id);\n    const newNotes = notes.filter(note => {\n      return note._id !== id;\n    });\n    setNotes(newNotes);\n  };\n  return /*#__PURE__*/_jsxDEV(noteContext.Provider, {\n    value: {\n      notes,\n      addNote,\n      editNote,\n      deleteNote,\n      getNotes\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 5\n  }, this);\n};\n_s(NoteState, \"hccfwx9qLG83YV7VqgUOSPmOD6I=\");\n_c = NoteState;\nexport default NoteState;\nvar _c;\n$RefreshReg$(_c, \"NoteState\");","map":{"version":3,"names":["React","useState","noteContext","jsxDEV","_jsxDEV","NoteState","props","_s","host","notesInitial","notes","setNotes","getNotes","response","fetch","method","headers","localStorage","getItem","json","addNote","title","description","tag","body","JSON","stringify","note","concat","editNote","id","console","log","newNotes","parse","index","length","element","_id","deleteNote","filter","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Ankit sharma/OneDrive/Desktop/Nodejsprojects/i-noteskeep/src/context/notes/NoteState.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport noteContext from \"./noteContext\";\r\n\r\n\r\nconst NoteState = (props) => {\r\n  const host = \"http://localhost:5000\";\r\n\r\n  const notesInitial = [];\r\n  const [notes, setNotes] = useState(notesInitial);\r\n  \r\n  //GET ALL NOTES\r\n  const getNotes = async() => {\r\n    //API CALL\r\n    const response = await fetch(`${host}/api/notes/fetchallnotes`, {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"auth-token\":\r\n          localStorage.getItem('token'),\r\n      },\r\n    });\r\n    const json = await response.json();\r\n    // console.log(json);\r\n    setNotes(json)\r\n\r\n  };\r\n\r\n  //ADD A NOTE\r\n  const addNote = async(title, description, tag) => {\r\n    //API CALL\r\n    const response = await fetch(`${host}/api/notes/addnote`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"auth-token\":\r\n          localStorage.getItem('token'),\r\n      },\r\n      body: JSON.stringify({ title, description, tag }),\r\n    });\r\n\r\n    // LOGIC \r\n    // console.log(\"adding a new note\");\r\n    const note = await response.json();\r\n    setNotes(notes.concat(note));\r\n  };\r\n\r\n  //EDIT A NOTE\r\n\r\n  const editNote = async (id, title, description, tag) => {\r\n    //API CALL\r\n\r\n    const response = await fetch(`${host}/api/notes/updatenote/${id}`, {\r\n      method: \"PUT\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"auth-token\":\r\n          localStorage.getItem('token'),\r\n      },\r\n      body: JSON.stringify({ title, description, tag }),\r\n    }); \r\n    const json = response.json();\r\n    console.log(json);\r\n\r\n    //logic to edit in client\r\n    let newNotes = JSON.parse(JSON.stringify(notes));\r\n    for (let index = 0; index < notes.length; index++) {\r\n      const element = notes[index];\r\n      if (element._id === id) {\r\n        newNotes[index].title = title;\r\n        newNotes[index].description = description;\r\n        newNotes[index].tag = tag;\r\n        break;\r\n      }\r\n    }\r\n    getNotes(newNotes);\r\n  };\r\n\r\n  //DELETE A NOTE\r\n  \r\n\r\n  const deleteNote = async (id) => {\r\n    //API CALL\r\n\r\n    const response = await fetch(`${host}/api/notes/deletenote/${id}`, {\r\n      method: \"DELETE\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"auth-token\":\r\n          localStorage.getItem('token'),\r\n      },\r\n    }); \r\n\r\n    const json = response.json();   \r\n    console.log(json)\r\n    // console.log(\"deleting the note with id\" + id);\r\n    const newNotes = notes.filter((note) => {\r\n      return note._id !== id;\r\n    });\r\n    setNotes(newNotes);\r\n  };\r\n\r\n  return (\r\n    <noteContext.Provider value={{ notes, addNote, editNote, deleteNote, getNotes}}>\r\n      {props.children}\r\n    </noteContext.Provider>\r\n  );\r\n};\r\n\r\nexport default NoteState;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}